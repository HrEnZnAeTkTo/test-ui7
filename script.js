// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentZoom = 1;
let svgElement = null;
let showHeatmap = true;
let panX = 0, panY = 0;
let isDragging = false;
let startX, startY;
let isMobile = window.innerWidth <= 768;
let mobileControlsOpen = false;
let mapInfoOpen = false;

// –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–∞–Ω—Ü–∏–π –∫ –∏—Ö ID –≤ SVG
const stationMapping = {
    '–°–æ–∫–æ–ª—å–Ω–∏–∫–∏': 's1_1_Sokolniki',
    '–ö—Ä–∞—Å–Ω–æ—Å–µ–ª—å–∫–∞—è': 's1_Krasnoselskaya',
    '–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è': 's1_1_Komsomolskaya',
    '–ö—Ä–∞—Å–Ω—ã–µ –≤–æ—Ä–æ—Ç–∞': 's1_Krasniye_Vorota',
    '–ß–∏—Å—Ç—ã–µ –ø—Ä—É–¥—ã': 's1_1_Chistye_Prudy',
    '–õ—É–±—è–Ω–∫–∞': 's1_2_Lubyanka',
    '–û—Ö–æ—Ç–Ω—ã–π —Ä—è–¥': 's1_1_Okhotny_Ryad',
    '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏–º–µ–Ω–∏ –õ–µ–Ω–∏–Ω–∞': 's1_4_Biblioteka_Im_Lenina',
    '–ö—Ä–æ–ø–æ—Ç–∫–∏–Ω—Å–∫–∞—è': 's1_1_Kropotkinskaya',
    '–ü–∞—Ä–∫ –∫—É–ª—å—Ç—É—Ä—ã': 's1_2_Park_Kultury',
    '–§—Ä—É–Ω–∑–µ–Ω—Å–∫–∞—è': 's1_Frunzenskaya',
    '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è': 's1_Sportivnaya',
    '–í–æ—Ä–æ–±—å—ë–≤—ã –≥–æ—Ä—ã': 's1_Vorobyovy_Gory',
    '–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç': 's1_Universitet',
    '–ü—Ä–æ—Å–ø–µ–∫—Ç –í–µ—Ä–Ω–∞–¥—Å–∫–æ–≥–æ': 's1_2_Prospekt_Vernadskogo',
    '–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω–∞—è': 's1_Yugo_Zapadnaya',
    '–¢—Ä–æ–ø–∞—Ä—ë–≤–æ': 's1_Troparyovo',
    '–†—É–º—è–Ω—Ü–µ–≤–æ': 's1_Rumyantsevo',
    '–°–∞–ª–∞—Ä—å–µ–≤–æ': 's1_Salaryevo',
    '–†–µ—á–Ω–æ–π –≤–æ–∫–∑–∞–ª': 's2_Rechnoy_Vokzal',
    '–í–æ–¥–Ω—ã–π —Å—Ç–∞–¥–∏–æ–Ω': 's2_1_Vodny_Stadion',
    '–í–æ–π–∫–æ–≤—Å–∫–∞—è': 's2_4_Voykovskaya',
    '–°–æ–∫–æ–ª': 's2_Sokol',
    '–ê—ç—Ä–æ–ø–æ—Ä—Ç': 's2_Aeroport',
    '–î–∏–Ω–∞–º–æ': 's2_2_Dinamo',
    '–ë–µ–ª–æ—Ä—É—Å—Å–∫–∞—è': 's2_3_Belorusskaya',
    '–ú–∞—è–∫–æ–≤—Å–∫–∞—è': 's2_Mayakovskaya',
    '–¢–≤–µ—Ä—Å–∫–∞—è': 's2_7_Tverskaya',
    '–¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞—è': 's2_3_Teatralnaya',
    '–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫–∞—è': 's2_2_Novokuznetskaya',
    '–ü–∞–≤–µ–ª–µ—Ü–∫–∞—è': 's2_3_Paveletskaya',
    '–ê–≤—Ç–æ–∑–∞–≤–æ–¥—Å–∫–∞—è': 's2_4_Avtozavodskaya',
    '–¢–µ—Ö–Ω–æ–ø–∞—Ä–∫': 's2_Tekhnopark',
    '–ö–æ–ª–æ–º–µ–Ω—Å–∫–∞—è': 's2_4_Kolomenskaya',
    '–ö–∞—à–∏—Ä—Å–∫–∞—è': 's2_3_Kashirskaya',
    '–ö–∞–Ω—Ç–µ–º–∏—Ä–æ–≤—Å–∫–∞—è': 's2_4_Kantemirovskaya',
    '–¶–∞—Ä–∏—Ü—ã–Ω–æ': 's2_4_Tsaritsyno',
    '–û—Ä–µ—Ö–æ–≤–æ': 's2_4_Orekhovo',
    '–î–æ–º–æ–¥–µ–¥–æ–≤—Å–∫–∞—è': 's2_4_Domodedovskaya',
    '–ö—Ä–∞—Å–Ω–æ–≥–≤–∞—Ä–¥–µ–π—Å–∫–∞—è': 's2_2_Krasnogvardeyskaya'
};

// –î–∞–Ω–Ω—ã–µ –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ (—Å–∏–º—É–ª—è—Ü–∏—è)
const incidentData = {
    '–°–æ–∫–æ–ª—å–Ω–∏–∫–∏': 0,
    '–ö—Ä–∞—Å–Ω—ã–µ –≤–æ—Ä–æ—Ç–∞': 3,
    '–ß–∏—Å—Ç—ã–µ –ø—Ä—É–¥—ã': 1,
    '–õ—É–±—è–Ω–∫–∞': 0,
    '–û—Ö–æ—Ç–Ω—ã–π —Ä—è–¥': 2,
    '–¢–≤–µ—Ä—Å–∫–∞—è': 1,
    '–¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞—è': 0,
    '–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫–∞—è': 0,
    '–ü–∞–≤–µ–ª–µ—Ü–∫–∞—è': 1,
    '–ê–≤—Ç–æ–∑–∞–≤–æ–¥—Å–∫–∞—è': 0,
    '–ö–∞—à–∏—Ä—Å–∫–∞—è': 2,
    '–ö—Ä–∞—Å–Ω–æ–≥–≤–∞—Ä–¥–µ–π—Å–∫–∞—è': 1,
    '–ö—Ä–æ–ø–æ—Ç–∫–∏–Ω—Å–∫–∞—è': 0,
    '–ü–∞—Ä–∫ –∫—É–ª—å—Ç—É—Ä—ã': 1,
    '–§—Ä—É–Ω–∑–µ–Ω—Å–∫–∞—è': 0,
    '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è': 0,
    '–í–æ—Ä–æ–±—å—ë–≤—ã –≥–æ—Ä—ã': 0,
    '–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç': 0,
    '–ü—Ä–æ—Å–ø–µ–∫—Ç –í–µ—Ä–Ω–∞–¥—Å–∫–æ–≥–æ': 1,
    '–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω–∞—è': 0
};

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞–Ω—Ü–∏—è—Ö
const stationInfo = {
    '–°–æ–∫–æ–ª—å–Ω–∏–∫–∏': {
        name: '–°–æ–∫–æ–ª—å–Ω–∏–∫–∏',
        line: '–°–æ–∫–æ–ª—å–Ω–∏—á–µ—Å–∫–∞—è',
        coords: '55.7887, 37.6797',
        escalators: 2,
        cameras: 2,
        lastIncident: '20.09.2025'
    },
    '–ö—Ä–∞—Å–Ω—ã–µ –≤–æ—Ä–æ—Ç–∞': {
        name: '–ö—Ä–∞—Å–Ω—ã–µ –≤–æ—Ä–æ—Ç–∞',
        line: '–°–æ–∫–æ–ª—å–Ω–∏—á–µ—Å–∫–∞—è', 
        coords: '55.7687, 37.6346',
        escalators: 3,
        cameras: 1,
        lastIncident: '–°–µ–≥–æ–¥–Ω—è 14:35'
    },
    '–ß–∏—Å—Ç—ã–µ –ø—Ä—É–¥—ã': {
        name: '–ß–∏—Å—Ç—ã–µ –ø—Ä—É–¥—ã',
        line: '–°–æ–∫–æ–ª—å–Ω–∏—á–µ—Å–∫–∞—è',
        coords: '55.7653, 37.6387',
        escalators: 2,
        cameras: 2,
        lastIncident: '–°–µ–≥–æ–¥–Ω—è 12:10'
    },
    '–õ—É–±—è–Ω–∫–∞': {
        name: '–õ—É–±—è–Ω–∫–∞',
        line: '–°–æ–∫–æ–ª—å–Ω–∏—á–µ—Å–∫–∞—è',
        coords: '55.7587, 37.6281',
        escalators: 4,
        cameras: 3,
        lastIncident: '19.09.2025'
    },
    '–û—Ö–æ—Ç–Ω—ã–π —Ä—è–¥': {
        name: '–û—Ö–æ—Ç–Ω—ã–π —Ä—è–¥',
        line: '–°–æ–∫–æ–ª—å–Ω–∏—á–µ—Å–∫–∞—è',
        coords: '55.7570, 37.6156',
        escalators: 3,
        cameras: 2,
        lastIncident: '–°–µ–≥–æ–¥–Ω—è 13:22'
    },
    '–¢–≤–µ—Ä—Å–∫–∞—è': {
        name: '–¢–≤–µ—Ä—Å–∫–∞—è',
        line: '–ó–∞–º–æ—Å–∫–≤–æ—Ä–µ—Ü–∫–∞—è',
        coords: '55.7664, 37.6043',
        escalators: 2,
        cameras: 2,
        lastIncident: '–°–µ–≥–æ–¥–Ω—è 11:45'
    }
};

// Theme toggle functionality
function initThemeToggle() {
    const themeToggle = document.getElementById('theme-toggle');
    const body = document.body;
    
    if (!themeToggle) return;
    
    // Check for saved theme preference or default to light
    const currentTheme = localStorage.getItem('theme') || 'light';
    body.setAttribute('data-theme', currentTheme);
    themeToggle.textContent = currentTheme === 'dark' ? '‚òÄÔ∏è' : 'üåô';

    themeToggle.addEventListener('click', () => {
        const isCurrentlyDark = body.getAttribute('data-theme') === 'dark';
        const newTheme = isCurrentlyDark ? 'light' : 'dark';
        
        body.setAttribute('data-theme', newTheme);
        themeToggle.textContent = newTheme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
        localStorage.setItem('theme', newTheme);
    });
}

// Mobile navigation functionality
function initMobileNavigation() {
    const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
    const mobileNav = document.getElementById('mobile-nav');
    const mobileNavClose = document.getElementById('mobile-nav-close');
    const mobileNavLinks = document.querySelectorAll('.mobile-nav-link');

    if (mobileMenuToggle && mobileNav) {
        mobileMenuToggle.addEventListener('click', () => {
            mobileNav.classList.add('active');
        });
    }

    if (mobileNavClose && mobileNav) {
        mobileNavClose.addEventListener('click', () => {
            mobileNav.classList.remove('active');
        });
    }

    // Close mobile nav when clicking outside
    if (mobileNav) {
        mobileNav.addEventListener('click', (e) => {
            if (e.target === mobileNav) {
                mobileNav.classList.remove('active');
            }
        });
    }

    // Mobile navigation links
    mobileNavLinks.forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            
            // Remove active class from all links
            document.querySelectorAll('.nav-link, .mobile-nav-link').forEach(l => l.classList.remove('active'));
            
            // Add active class to clicked link and corresponding desktop link
            link.classList.add('active');
            const targetPage = link.getAttribute('data-page');
            const desktopLink = document.querySelector(`.nav-link[data-page="${targetPage}"]`);
            if (desktopLink) {
                desktopLink.classList.add('active');
            }
            
            // Show corresponding page
            document.querySelectorAll('.page').forEach(p => p.classList.remove('active'));
            const targetPageElement = document.getElementById(targetPage);
            if (targetPageElement) {
                targetPageElement.classList.add('active');
            }
            
            // Close mobile nav
            if (mobileNav) {
                mobileNav.classList.remove('active');
            }
        });
    });
}

// Desktop navigation functionality
function initDesktopNavigation() {
    const navLinks = document.querySelectorAll('.nav-link');
    
    navLinks.forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            
            // Remove active class from all links
            document.querySelectorAll('.nav-link, .mobile-nav-link').forEach(l => l.classList.remove('active'));
            
            // Add active class to clicked link and corresponding mobile link
            link.classList.add('active');
            const targetPage = link.getAttribute('data-page');
            const mobileLink = document.querySelector(`.mobile-nav-link[data-page="${targetPage}"]`);
            if (mobileLink) {
                mobileLink.classList.add('active');
            }
            
            // Show corresponding page
            document.querySelectorAll('.page').forEach(p => p.classList.remove('active'));
            const targetPageElement = document.getElementById(targetPage);
            if (targetPageElement) {
                targetPageElement.classList.add('active');
            }
        });
    });
}

// Mobile controls functionality
function toggleMobileControls() {
    mobileControlsOpen = !mobileControlsOpen;
    const panel = document.getElementById('mobile-controls-panel');
    if (panel) {
        if (mobileControlsOpen) {
            panel.classList.add('active');
        } else {
            panel.classList.remove('active');
        }
    }
}

// Mobile map info functionality
function toggleMobileMapInfo() {
    mapInfoOpen = !mapInfoOpen;
    const mapInfo = document.getElementById('map-info-mobile');
    if (mapInfo) {
        if (mapInfoOpen) {
            mapInfo.classList.add('active');
        } else {
            mapInfo.classList.remove('active');
        }
    }
}

function showMapLegend() {
    const legendContent = `–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –∑–∞ 24 —á–∞—Å–∞:

üü¢ –ó–µ–ª—ë–Ω—ã–π - 0 –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
üü° –ñ—ë–ª—Ç—ã–π - 1-2 –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞  
üî¥ –ö—Ä–∞—Å–Ω—ã–π - 3+ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
‚ö´ –°–µ—Ä—ã–π - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
‚Ä¢ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ: –∂–µ—Å—Ç—ã pinch –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ +/-
‚Ä¢ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ: –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –ø–∞–ª—å—Ü–µ–º
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é`;
    
    alert(legendContent);
    toggleMobileControls(); // Close controls after showing legend
}

// Add vibration feedback for mobile interactions (if supported)
function vibrateFeedback(pattern = [10]) {
    if (isMobile && 'vibrate' in navigator) {
        navigator.vibrate(pattern);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ SVG –∫–∞—Ä—Ç—ã
async function loadMetroMap() {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º map.svg –∏–∑ –ø–∞–ø–∫–∏ —Å index.html
        const response = await fetch('map.svg');
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const svgContent = await response.text();
        const container = document.getElementById('svg-container');
        if (container) {
            container.innerHTML = svgContent;
            
            svgElement = container.querySelector('svg');
            if (svgElement) {
                svgElement.style.width = '500%';
                svgElement.style.height = '500%';
                svgElement.style.cursor = isMobile ? 'default' : 'grab';
                svgElement.style.touchAction = 'none';
                
                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º SVG
                setupStationsFromSVG();
                setupSVGInteractivity();
                applyHeatmap();
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã –º–µ—Ç—Ä–æ:', error);
        console.log('–ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –¥–µ–º–æ-–∫–∞—Ä—Ç—É...');
        
        // Fallback –Ω–∞ –¥–µ–º–æ-–∫–∞—Ä—Ç—É –µ—Å–ª–∏ map.svg –Ω–µ –Ω–∞–π–¥–µ–Ω
        try {
            const svgContent = createDemoSVG();
            const container = document.getElementById('svg-container');
            if (container) {
                container.innerHTML = svgContent;
                
                svgElement = container.querySelector('svg');
                if (svgElement) {
                    svgElement.style.width = '100%';
                    svgElement.style.height = '100%';
                    svgElement.style.cursor = isMobile ? 'default' : 'grab';
                    svgElement.style.touchAction = 'none';
                    
                    setupSVGInteractivity();
                    applyHeatmap();
                }
            }
        } catch (fallbackError) {
            const container = document.getElementById('svg-container');
            if (container) {
                container.innerHTML = '<div style="display: flex; align-items: center; justify-content: center; height: 100%; color: var(--text-secondary); text-align: center; padding: 2rem;">‚ö†Ô∏è<br>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã –º–µ—Ç—Ä–æ<br><small>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ map.svg</small></div>';
            }
        }
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞–Ω—Ü–∏–π –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º SVG
function setupStationsFromSVG() {
    if (!svgElement) return;

    // –ò—â–µ–º –≤—Å–µ –∫—Ä—É–≥–ª—ã–µ –æ–±—ä–µ–∫—Ç—ã (—Å—Ç–∞–Ω—Ü–∏–∏) –≤ SVG
    const circles = svgElement.querySelectorAll('circle');
    
    circles.forEach(circle => {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É (–æ–±—ã—á–Ω–æ —Å—Ç–∞–Ω—Ü–∏–∏ –∏–º–µ—é—Ç —Ä–∞–¥–∏—É—Å –±–æ–ª—å—à–µ 8)
        const radius = parseFloat(circle.getAttribute('r') || '0');
        if (radius >= 8) {
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –º–µ—Ç—Ä–æ —Å—Ç–∞–Ω—Ü–∏–∏
            circle.classList.add('metro-station');
            
            // –ü–æ–ª—É—á–∞–µ–º ID —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏
            const elementId = circle.getAttribute('id');
            let stationName = null;
            
            // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –º–∞–ø–ø–∏–Ω–≥–µ
            for (const [name, id] of Object.entries(stationMapping)) {
                if (id === elementId) {
                    stationName = name;
                    break;
                }
            }
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –º–∞–ø–ø–∏–Ω–≥–µ, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ ID –∏–ª–∏ —Å–æ—Å–µ–¥–Ω–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            if (!stationName) {
                // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
                const textElements = svgElement.querySelectorAll('text');
                let closestText = null;
                let minDistance = Infinity;
                
                const cx = parseFloat(circle.getAttribute('cx') || '0');
                const cy = parseFloat(circle.getAttribute('cy') || '0');
                
                textElements.forEach(textEl => {
                    const x = parseFloat(textEl.getAttribute('x') || '0');
                    const y = parseFloat(textEl.getAttribute('y') || '0');
                    const distance = Math.sqrt(Math.pow(cx - x, 2) + Math.pow(cy - y, 2));
                    
                    if (distance < minDistance && distance < 50) { // –í –ø—Ä–µ–¥–µ–ª–∞—Ö 50 –µ–¥–∏–Ω–∏—Ü
                        minDistance = distance;
                        closestText = textEl.textContent.trim();
                    }
                });
                
                if (closestText) {
                    stationName = closestText;
                } else {
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –∏–∑ ID
                    stationName = elementId ? elementId.replace(/[^a-zA-Z–∞-—è–ê-–Ø]/g, ' ').trim() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è';
                }
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç data-station
            circle.setAttribute('data-station', stationName);
            
            // –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º title —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è tooltip
            let titleElement = circle.querySelector('title');
            if (!titleElement) {
                titleElement = document.createElementNS('http://www.w3.org/2000/svg', 'title');
                circle.appendChild(titleElement);
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–Ω—Ü–∏–∏
            const info = stationInfo[stationName];
            const incidents = incidentData[stationName] || 0;
            
            let titleText;
            if (info) {
                titleText = `${info.name}
–õ–∏–Ω–∏—è: ${info.line}
–≠—Å–∫–∞–ª–∞—Ç–æ—Ä–æ–≤: ${info.escalators}
–ö–∞–º–µ—Ä: ${info.cameras}
–ò–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –∑–∞ 24—á: ${incidents}
–ü–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç: ${info.lastIncident}`;
            } else {
                titleText = `${stationName}
–ò–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –∑–∞ 24—á: ${incidents}
–°—Ç–∞—Ç—É—Å: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥`;
            }
            
            titleElement.textContent = titleText;
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è hover —ç—Ñ—Ñ–µ–∫—Ç–∞
            circle.style.cursor = 'pointer';
            circle.style.transition = 'transform 0.2s ease, filter 0.2s ease';
            
            console.log(`–ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Å—Ç–∞–Ω—Ü–∏—è: ${stationName} (ID: ${elementId})`);
        }
    });
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ ${circles.length} —Å—Ç–∞–Ω—Ü–∏–π –≤ SVG –∫–∞—Ä—Ç–µ`);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ SVG (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è map.svg)
function createDemoSVG() {
    const stationRadius = isMobile ? '16' : '12';
    const lineWidth = isMobile ? '10' : '8';
    const fontSize = isMobile ? '14' : '12';
    
    return `
        <svg viewBox="0 0 800 600" xmlns="http://www.w3.org/2000/svg">
            <!-- –°–æ–∫–æ–ª—å–Ω–∏—á–µ—Å–∫–∞—è –ª–∏–Ω–∏—è -->
            <line x1="50" y1="300" x2="750" y2="300" stroke="#ed1b35" stroke-width="${lineWidth}"/>
            
            <!-- –ó–∞–º–æ—Å–∫–≤–æ—Ä–µ—Ü–∫–∞—è –ª–∏–Ω–∏—è -->
            <line x1="400" y1="50" x2="400" y2="550" stroke="#44b85c" stroke-width="${lineWidth}"/>
            
            <!-- –°—Ç–∞–Ω—Ü–∏–∏ –°–æ–∫–æ–ª—å–Ω–∏—á–µ—Å–∫–æ–π –ª–∏–Ω–∏–∏ -->
            <circle id="s1_1_Sokolniki" class="metro-station" cx="100" cy="300" r="${stationRadius}" fill="white" stroke="#ed1b35" stroke-width="4" data-station="–°–æ–∫–æ–ª—å–Ω–∏–∫–∏"/>
            <text x="100" y="${isMobile ? '275' : '285'}" text-anchor="middle" font-size="${fontSize}" fill="var(--text-primary)" font-weight="500">–°–æ–∫–æ–ª—å–Ω–∏–∫–∏</text>
            
            <circle id="s1_Krasniye_Vorota" class="metro-station" cx="200" cy="300" r="${stationRadius}" fill="white" stroke="#ed1b35" stroke-width="4" data-station="–ö—Ä–∞—Å–Ω—ã–µ –≤–æ—Ä–æ—Ç–∞"/>
            <text x="200" y="${isMobile ? '275' : '285'}" text-anchor="middle" font-size="${fontSize}" fill="var(--text-primary)" font-weight="500">–ö—Ä–∞—Å–Ω—ã–µ –≤–æ—Ä–æ—Ç–∞</text>
            
            <circle id="s1_1_Chistye_Prudy" class="metro-station" cx="300" cy="300" r="${stationRadius}" fill="white" stroke="#ed1b35" stroke-width="4" data-station="–ß–∏—Å—Ç—ã–µ –ø—Ä—É–¥—ã"/>
            <text x="300" y="${isMobile ? '275' : '285'}" text-anchor="middle" font-size="${fontSize}" fill="var(--text-primary)" font-weight="500">–ß–∏—Å—Ç—ã–µ –ø—Ä—É–¥—ã</text>
            
            <circle id="s1_2_Lubyanka" class="metro-station" cx="400" cy="300" r="${stationRadius}" fill="white" stroke="#ed1b35" stroke-width="4" data-station="–õ—É–±—è–Ω–∫–∞"/>
            <text x="400" y="${isMobile ? '275' : '285'}" text-anchor="middle" font-size="${fontSize}" fill="var(--text-primary)" font-weight="500">–õ—É–±—è–Ω–∫–∞</text>
            
            <circle id="s1_1_Okhotny_Ryad" class="metro-station" cx="500" cy="300" r="${stationRadius}" fill="white" stroke="#ed1b35" stroke-width="4" data-station="–û—Ö–æ—Ç–Ω—ã–π —Ä—è–¥"/>
            <text x="500" y="${isMobile ? '275' : '285'}" text-anchor="middle" font-size="${fontSize}" fill="var(--text-primary)" font-weight="500">–û—Ö–æ—Ç–Ω—ã–π —Ä—è–¥</text>
            
            <circle id="s1_2_Park_Kultury" class="metro-station" cx="600" cy="300" r="${stationRadius}" fill="white" stroke="#ed1b35" stroke-width="4" data-station="–ü–∞—Ä–∫ –∫—É–ª—å—Ç—É—Ä—ã"/>
            <text x="600" y="${isMobile ? '275' : '285'}" text-anchor="middle" font-size="${fontSize}" fill="var(--text-primary)" font-weight="500">–ü–∞—Ä–∫ –∫—É–ª—å—Ç—É—Ä—ã</text>
            
            <!-- –°—Ç–∞–Ω—Ü–∏–∏ –ó–∞–º–æ—Å–∫–≤–æ—Ä–µ—Ü–∫–æ–π –ª–∏–Ω–∏–∏ -->
            <circle id="s2_7_Tverskaya" class="metro-station" cx="400" cy="150" r="${stationRadius}" fill="white" stroke="#44b85c" stroke-width="4" data-station="–¢–≤–µ—Ä—Å–∫–∞—è"/>
            <text x="400" y="${isMobile ? '125' : '135'}" text-anchor="middle" font-size="${fontSize}" fill="var(--text-primary)" font-weight="500">–¢–≤–µ—Ä—Å–∫–∞—è</text>
            
            <circle id="s2_3_Teatralnaya" class="metro-station" cx="400" cy="250" r="${stationRadius}" fill="white" stroke="#44b85c" stroke-width="4" data-station="–¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞—è"/>
            <text x="430" y="255" text-anchor="start" font-size="${fontSize}" fill="var(--text-primary)" font-weight="500">–¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞—è</text>
            
            <circle id="s2_2_Novokuznetskaya" class="metro-station" cx="400" cy="350" r="${stationRadius}" fill="white" stroke="#44b85c" stroke-width="4" data-station="–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫–∞—è"/>
            <text x="430" y="355" text-anchor="start" font-size="${fontSize}" fill="var(--text-primary)" font-weight="500">–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫–∞—è</text>
            
            <circle id="s2_3_Paveletskaya" class="metro-station" cx="400" cy="450" r="${stationRadius}" fill="white" stroke="#44b85c" stroke-width="4" data-station="–ü–∞–≤–µ–ª–µ—Ü–∫–∞—è"/>
            <text x="400" y="${isMobile ? '475' : '465'}" text-anchor="middle" font-size="${fontSize}" fill="var(--text-primary)" font-weight="500">–ü–∞–≤–µ–ª–µ—Ü–∫–∞—è</text>
        </svg>
    `;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ SVG
function setupSVGInteractivity() {
    if (!svgElement) return;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–π
    const stations = svgElement.querySelectorAll('.metro-station');
    stations.forEach(station => {
        station.style.cursor = 'pointer';
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        station.addEventListener('click', handleStationClick);
        
        // Hover —ç—Ñ—Ñ–µ–∫—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è desktop
        if (!('ontouchstart' in window)) {
            station.addEventListener('mouseenter', handleStationHover);
            station.addEventListener('mouseleave', handleStationLeave);
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ hover —ç—Ñ—Ñ–µ–∫—Ç—ã
            station.addEventListener('mouseenter', (e) => {
                e.target.style.transform = 'scale(1.2)';
                e.target.style.filter = 'drop-shadow(0 0 8px rgba(59, 130, 246, 0.6))';
                e.target.style.zIndex = '10';
            });
            
            station.addEventListener('mouseleave', (e) => {
                e.target.style.transform = 'scale(1)';
                e.target.style.filter = 'none';
                e.target.style.zIndex = 'auto';
            });
        }
    });

    // Touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    if (isMobile) {
        setupTouchEvents();
    } else {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ drag & drop –¥–ª—è desktop
        svgElement.addEventListener('mousedown', startDragging);
        svgElement.addEventListener('mousemove', drag);
        svgElement.addEventListener('mouseup', stopDragging);
        svgElement.addEventListener('mouseleave', stopDragging);
        svgElement.addEventListener('wheel', handleWheel);
    }
    
    console.log(`–ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è ${stations.length} —Å—Ç–∞–Ω—Ü–∏–π`);
}

// Touch events for mobile gestures
function setupTouchEvents() {
    if (!svgElement) return;

    let touchStartX, touchStartY;
    let lastTouchDistance = 0;
    let isMultiTouch = false;

    svgElement.addEventListener('touchstart', (e) => {
        e.preventDefault();
        
        if (e.touches.length === 1) {
            // Single touch - start dragging
            const touch = e.touches[0];
            touchStartX = touch.clientX - panX;
            touchStartY = touch.clientY - panY;
            isDragging = true;
            isMultiTouch = false;
        } else if (e.touches.length === 2) {
            // Multi-touch - prepare for zoom
            isMultiTouch = true;
            isDragging = false;
            const touch1 = e.touches[0];
            const touch2 = e.touches[1];
            lastTouchDistance = Math.sqrt(
                Math.pow(touch2.clientX - touch1.clientX, 2) +
                Math.pow(touch2.clientY - touch1.clientY, 2)
            );
        }
    }, { passive: false });

    svgElement.addEventListener('touchmove', (e) => {
        e.preventDefault();
        
        if (e.touches.length === 1 && isDragging && !isMultiTouch) {
            // Single touch - dragging
            const touch = e.touches[0];
            panX = touch.clientX - touchStartX;
            panY = touch.clientY - touchStartY;
            updateTransform();
        } else if (e.touches.length === 2 && isMultiTouch) {
            // Multi-touch - zooming
            const touch1 = e.touches[0];
            const touch2 = e.touches[1];
            const currentDistance = Math.sqrt(
                Math.pow(touch2.clientX - touch1.clientX, 2) +
                Math.pow(touch2.clientY - touch1.clientY, 2)
            );
            
            if (lastTouchDistance > 0) {
                const scale = currentDistance / lastTouchDistance;
                zoomMap(scale);
            }
            lastTouchDistance = currentDistance;
        }
    }, { passive: false });

    svgElement.addEventListener('touchend', (e) => {
        e.preventDefault();
        isDragging = false;
        isMultiTouch = false;
        lastTouchDistance = 0;
    }, { passive: false });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é
function handleStationHover(event) {
    const stationName = event.target.getAttribute('data-station');
    if (stationName) {
        const info = stationInfo[stationName];
        const incidents = incidentData[stationName] || 0;
        
        updateStationInfo(stationName, info || {name: stationName}, incidents);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Å—Ç–∞–Ω—Ü–∏–∏
function handleStationClick(event) {
    event.stopPropagation();
    const stationName = event.target.getAttribute('data-station');
    if (stationName) {
        vibrateFeedback([20]); // Vibration feedback
        
        const info = stationInfo[stationName];
        const incidents = incidentData[stationName] || 0;
        
        updateStationInfo(stationName, info || {name: stationName}, incidents);
        
        if (isMobile) {
            // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
            if (!mapInfoOpen) {
                toggleMobileMapInfo();
            }
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—ã –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã
            if (mobileControlsOpen) {
                toggleMobileControls();
            }
        } else {
            // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
            if (info) {
                showStationDetails(stationName);
            } else {
                alert(`–°—Ç–∞–Ω—Ü–∏—è: ${stationName}\n–ò–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –∑–∞ 24—á: ${incidents}\n\n–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.`);
            }
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞–Ω—Ü–∏–∏
function updateStationInfo(stationName, info, incidents) {
    let content;
    if (info && info.name) {
        content = `
            <strong>${info.name}</strong><br>
            –õ–∏–Ω–∏—è: ${info.line || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}<br>
            –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${info.coords || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}<br>
            –≠—Å–∫–∞–ª–∞—Ç–æ—Ä–æ–≤: ${info.escalators || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}<br>
            –ö–∞–º–µ—Ä: ${info.cameras || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}<br>
            –ò–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –∑–∞ 24—á: ${incidents}<br>
            –ü–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç: ${info.lastIncident || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
        `;
    } else {
        content = `
            <strong>${stationName}</strong><br>
            –ò–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –∑–∞ 24—á: ${incidents}<br>
            –°—Ç–∞—Ç—É—Å: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥<br>
            <small>–î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î</small>
        `;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞–Ω–µ–ª–∏
    const stationInfoElement = document.getElementById('station-info');
    const stationInfoMobileElement = document.getElementById('station-info-mobile');
    
    if (stationInfoElement) {
        stationInfoElement.innerHTML = content;
    }
    if (stationInfoMobileElement) {
        stationInfoMobileElement.innerHTML = content;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ö–æ–¥–∞ –∫—É—Ä—Å–æ—Ä–∞ —Å–æ —Å—Ç–∞–Ω—Ü–∏–∏
function handleStationLeave() {
    if (!isMobile) {
        const stationInfoElement = document.getElementById('station-info');
        if (stationInfoElement) {
            stationInfoElement.innerHTML = '–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏';
        }
    }
}

// –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π —Å—Ç–∞–Ω—Ü–∏–∏
function showStationDetails(stationName) {
    const info = stationInfo[stationName];
    const incidents = incidentData[stationName] || 0;
    
    if (info) {
        alert(`–°—Ç–∞–Ω—Ü–∏—è: ${info.name}
–õ–∏–Ω–∏—è: ${info.line}
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${info.coords}
–≠—Å–∫–∞–ª–∞—Ç–æ—Ä–æ–≤: ${info.escalators}
–ö–∞–º–µ—Ä: ${info.cameras}
–ò–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –∑–∞ 24 —á–∞—Å–∞: ${incidents}
–ü–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç: ${info.lastIncident}

–í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–Ω—Ü–∏–∏.`);
    }
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
function applyHeatmap() {
    if (!svgElement || !showHeatmap) return;

    const stations = svgElement.querySelectorAll('.metro-station');
    stations.forEach(station => {
        const stationName = station.getAttribute('data-station');
        const incidents = incidentData[stationName] || 0;
        
        let color = '#6b7280'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ—Ä—ã–π
        let animation = '';
        
        if (incidents === 0) {
            color = '#22c55e'; // –ó–µ–ª—ë–Ω—ã–π
        } else if (incidents <= 2) {
            color = '#f59e0b'; // –ñ—ë–ª—Ç—ã–π
        } else {
            color = '#ef4444'; // –ö—Ä–∞—Å–Ω—ã–π
            animation = 'pulse 2s infinite';
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è stroke –∏ fill
        const originalStroke = station.getAttribute('stroke') || station.style.stroke;
        const originalFill = station.getAttribute('fill') || station.style.fill;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
        station.setAttribute('fill', color);
        station.style.animation = animation;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        station.setAttribute('data-original-stroke', originalStroke);
        station.setAttribute('data-original-fill', originalFill);
    });
    
    console.log(`–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Ç–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫ ${stations.length} —Å—Ç–∞–Ω—Ü–∏—è–º`);
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º
function zoomMap(factor) {
    currentZoom *= factor;
    
    // Different zoom limits for mobile vs desktop
    const minZoom = isMobile ? 0.3 : 0.5;
    const maxZoom = isMobile ? 8 : 5;
    
    currentZoom = Math.max(minZoom, Math.min(maxZoom, currentZoom));
    updateTransform();
    
    // Update coordinate display
    const coordDisplay = document.getElementById('coord-display');
    if (coordDisplay) {
        coordDisplay.textContent = `–ú–∞—Å—à—Ç–∞–±: ${Math.round(currentZoom * 100)}%`;
    }
}

function centerMap() {
    panX = 0;
    panY = 0;
    currentZoom = 1;
    updateTransform();
    
    const coordDisplay = document.getElementById('coord-display');
    if (coordDisplay) {
        coordDisplay.textContent = showHeatmap ? '–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞: –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –∑–∞ 24—á' : '–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –∫–∞—Ä—Ç—ã';
    }
    
    // Close mobile controls after action
    if (isMobile && mobileControlsOpen) {
        setTimeout(toggleMobileControls, 300);
    }
}

function resetView() {
    panX = 0;
    panY = 0;
    currentZoom = 1;
    showHeatmap = true;
    updateTransform();
    applyHeatmap();
    
    const coordDisplay = document.getElementById('coord-display');
    if (coordDisplay) {
        coordDisplay.textContent = '–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞: –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –∑–∞ 24—á';
    }
    
    // Reset mobile button states
    if (isMobile) {
        const heatmapButton = document.querySelector('.mobile-control-btn:nth-child(4)');
        if (heatmapButton) {
            heatmapButton.style.backgroundColor = 'var(--primary-color)';
            heatmapButton.style.color = 'white';
        }
    }
    
    // Close mobile controls after action
    if (isMobile && mobileControlsOpen) {
        setTimeout(toggleMobileControls, 300);
    }
}

function updateTransform() {
    if (svgElement) {
        // Use transform3d for better mobile performance
        const transform = `translate3d(${panX}px, ${panY}px, 0) scale(${currentZoom})`;
        svgElement.style.transform = transform;
        svgElement.style.transformOrigin = 'center center';
        
        // Add will-change for better mobile performance during animations
        svgElement.style.willChange = 'transform';
        
        // Remove will-change after animation to save resources
        setTimeout(() => {
            if (svgElement) {
                svgElement.style.willChange = 'auto';
            }
        }, 500);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–µ—Å–∏–∫–∞ –º—ã—à–∏ –¥–ª—è –∑—É–º–∞
function handleWheel(event) {
    event.preventDefault();
    const delta = event.deltaY;
    const factor = delta > 0 ? 0.9 : 1.1;
    zoomMap(factor);
}

// –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
function startDragging(event) {
    if (event.target.classList.contains('metro-station')) return;
    
    isDragging = true;
    startX = event.clientX - panX;
    startY = event.clientY - panY;
    if (svgElement) {
        svgElement.style.cursor = 'grabbing';
    }
}

function drag(event) {
    if (!isDragging) return;
    
    panX = event.clientX - startX;
    panY = event.clientY - startY;
    updateTransform();
}

function stopDragging() {
    isDragging = false;
    if (svgElement) {
        svgElement.style.cursor = 'grab';
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
function toggleHeatmap() {
    showHeatmap = !showHeatmap;
    
    if (showHeatmap) {
        applyHeatmap();
        const coordDisplay = document.getElementById('coord-display');
        if (coordDisplay) {
            coordDisplay.textContent = '–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞: –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –∑–∞ 24—á';
        }
        
        // Mobile feedback
        if (isMobile) {
            const button = document.querySelector('.mobile-control-btn:nth-child(4)');
            if (button) {
                button.style.backgroundColor = 'var(--primary-color)';
                button.style.color = 'white';
            }
        }
    } else {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞
        const stations = svgElement.querySelectorAll('.metro-station');
        stations.forEach(station => {
            const originalFill = station.getAttribute('data-original-fill') || 'white';
            const originalStroke = station.getAttribute('data-original-stroke') || '#ed1b35';
            
            station.setAttribute('fill', originalFill);
            station.setAttribute('stroke', originalStroke);
            station.style.animation = '';
        });
        
        const coordDisplay = document.getElementById('coord-display');
        if (coordDisplay) {
            coordDisplay.textContent = '–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –∫–∞—Ä—Ç—ã';
        }
        
        // Reset mobile button
        if (isMobile) {
            const button = document.querySelector('.mobile-control-btn:nth-child(4)');
            if (button) {
                button.style.backgroundColor = '';
                button.style.color = '';
            }
        }
    }
    
    // Close mobile controls after action
    if (isMobile && mobileControlsOpen) {
        setTimeout(toggleMobileControls, 300);
    }
}

// Window resize handler
function handleResize() {
    const wasMobile = isMobile;
    isMobile = window.innerWidth <= 768;
    
    // If switching between mobile/desktop, reinitialize interactions
    if (wasMobile !== isMobile && svgElement) {
        setupSVGInteractivity();
    }
    
    // Close mobile nav if switching to desktop
    const mobileNav = document.getElementById('mobile-nav');
    if (!isMobile && mobileNav) {
        mobileNav.classList.remove('active');
    }
    
    // Show/hide user info based on screen size
    const userInfo = document.querySelector('.user-info');
    if (userInfo) {
        userInfo.style.display = isMobile ? 'none' : 'block';
    }
}

// Export functionality
function exportChart(chartId) {
    const chart = document.getElementById(chartId);
    if (!chart) return;
    
    const formatSelect = chart.parentElement.querySelector('.export-select');
    const format = formatSelect ? formatSelect.value : 'pdf';
    
    // Simulate export process
    const chartTitle = chart.parentElement.querySelector('.card-title').textContent;
    
    // Show loading state
    const exportBtn = chart.parentElement.querySelector('.export-btn');
    if (exportBtn) {
        const originalText = exportBtn.innerHTML;
        exportBtn.innerHTML = '‚è≥ –≠–∫—Å–ø–æ—Ä—Ç...';
        exportBtn.disabled = true;
        
        setTimeout(() => {
            alert(`–≠–∫—Å–ø–æ—Ä—Ç "${chartTitle}" –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${format.toUpperCase()} –∑–∞–≤–µ—Ä—à–µ–Ω`);
            exportBtn.innerHTML = originalText;
            exportBtn.disabled = false;
            
            // In real implementation, this would trigger file download
            console.log(`Exporting ${chartId} as ${format}`);
        }, 2000);
    }
}

function generateReport(reportType) {
    const formatSelect = document.getElementById(`${reportType}-format`);
    const format = formatSelect ? formatSelect.value : 'pdf';
    
    const reportNames = {
        'daily': '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç',
        'weekly': '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç', 
        'monthly': '–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç',
        'station': '–û—Ç—á–µ—Ç –ø–æ —Å—Ç–∞–Ω—Ü–∏–∏'
    };
    
    const reportName = reportNames[reportType] || reportType;
    
    // Simulate report generation
    alert(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è "${reportName}" –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${format.toUpperCase()} –Ω–∞—á–∞—Ç–∞. –§–∞–π–ª –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.`);
    
    // In real implementation, this would call backend API
    console.log(`Generating ${reportType} report in ${format} format`);
}

// Modal functions
function viewIncident(incidentId) {
    const modal = document.getElementById('incident-modal');
    if (modal) {
        modal.classList.add('active');
    }
}

function closeModal() {
    const modal = document.getElementById('incident-modal');
    if (modal) {
        modal.classList.remove('active');
    }
}

function createIncident() {
    alert('–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞');
}

function viewStation(stationId) {
    alert(`–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π —Å—Ç–∞–Ω—Ü–∏–∏: ${stationId}`);
}

// Initialize mobile controls toggle
function initMobileControls() {
    const mobileControlsToggle = document.getElementById('mobile-controls-toggle');
    if (mobileControlsToggle) {
        mobileControlsToggle.addEventListener('click', toggleMobileControls);
    }
}

// Close mobile controls when clicking outside
function setupOutsideClickHandlers() {
    document.addEventListener('click', (e) => {
        const mobileControls = document.querySelector('.mobile-controls');
        const mobileControlsPanel = document.getElementById('mobile-controls-panel');
        
        if (mobileControlsOpen && mobileControls && !mobileControls.contains(e.target)) {
            toggleMobileControls();
        }
    });

    // Close modal when clicking outside
    const incidentModal = document.getElementById('incident-modal');
    if (incidentModal) {
        incidentModal.addEventListener('click', (e) => {
            if (e.target.classList.contains('modal')) {
                closeModal();
            }
        });
    }
}

// Initialize everything when DOM is loaded
function initializeApp() {
    console.log('Initializing EscControl application...');
    
    // Initialize all components
    initThemeToggle();
    initMobileNavigation();
    initDesktopNavigation();
    initMobileControls();
    setupOutsideClickHandlers();
    
    // Set initial mobile state
    isMobile = window.innerWidth <= 768;
    
    // Show/hide user info based on initial screen size
    const userInfo = document.querySelector('.user-info');
    if (userInfo) {
        userInfo.style.display = isMobile ? 'none' : 'block';
    }

    // Add window resize listener
    window.addEventListener('resize', handleResize);
    
    // Load metro map with delay for proper initialization
    setTimeout(() => {
        loadMetroMap();
    }, 100);

    console.log('EscControl application initialized successfully');
}

// Simulate real-time updates
function startRealTimeUpdates() {
    setInterval(() => {
        // In real implementation, this would fetch updates from the server
        // and update the UI accordingly
        console.log('Checking for updates...');
    }, 30000); // Check every 30 seconds
}

// Wait for DOM to be fully loaded
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeApp);
} else {
    initializeApp();
}

// Start real-time updates
startRealTimeUpdates();